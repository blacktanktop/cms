#!/bin/bash -euvx
source "$(dirname $0)/conf"
exec 2> "$logdir/$(basename $0).$(date +%Y%m%d_%H%M%S).$$"
[ -n "${CONTENT_LENGTH}" ] && dd bs=${CONTENT_LENGTH} > /dev/null
tmp=/tmp/$$
echo -e 'Content-type: text/html\n\n'

cd "$contentsdir"
git fetch origin master
git diff --name-status HEAD origin/master |
# 差分を取ってきたものをpullする
grep -Eo '(posts|pages)/[^/]+'             |
sort -u                                    > $tmp-git-change

git pull

# INITがあったら全記事更新
[ -f "$datadir/INIT" ] &&
find posts pages -type d       |
grep -Eo '(posts|pages)/[^/]+' > $tmp-git-change

rm -f "$datadir/INIT"

## create/delete article directory 
# 変更があったものだけcatする
cat $tmp-git-change |
while read d
do
    # 無い場合はdatadirの削除
    [ -f "$contentsdir/$d/main.md" ] || rm -Rf "$datadir/$d"
    # ある場合は次の処理へ(mkdir)
    # 無い場合次のループへ   
    [ -f "$contentsdir/$d/main.md" ] || continue

    mkdir -p "$datadir/$d"           &&
    ## add time stampfiles 
    git log -p "$contentsdir/$d/main.md" |
    grep '^Date:'                        |
    awk '{print $2,$3,$4,$5,$6}'         |
    date -f - "+%Y-%m-%d %H:%M:%S"       |
    awk -v cf="$datadir/$d/created_time" \
        -v mf="$datadir/$d/modified_time" \
        'NR==1{print > mf}END{print > cf}'

    ## make some snips
    # タイトル行の最初の一つのみ
    grep -m 1 '^# ' "$contentsdir/$d/main.md"           |
    # マークダウンの先頭の#を取り除く
    sed 's/^#  *//'                                     |
    # /^$/: title行の# 以降が空白 >> "NO TITLE"
    # if(NR==0) : title行がない(#の行がない) (NR==0というのはNRが無いっていうこと)
    awk '{if(/^$/){print "NO TITLE"}else{print}}
         END{if(NR==0){print "NO TITLE"}}'              |
    # ナビゲーションのためとmeta.yamlでつかう
    tee "$datadir/$d/title"                             |
    # s/を=に置換
    # リンク先をlinkファイルに保存
    awk -v d="$d" '{gsub(/s\//,"=",d);
        print "<a href=\"/?" d "\">" $0 "</a>"}' > "$datadir/$d/link"
    # 日付付きリンク
    # 半角スペース以降を無にする
    ymd=$(sed 's/ .*//' < "$datadir/$d/created_time")
    sed "s;</a>; ($ymd)&;" "$datadir/$d/link" > "$datadir/$d/link_date"

    touch "$datadir/$d/nav"
done

## make post/page list
#tmp=/tmp/$$
touch "$datadir/post_list"
# 更新前のリストを別のtmp-old-post-listに保存
cp "$datadir/post_list" $tmp-old-post-list

# list post data
# created_timeを全部出力
cd "$datadir"
find posts pages -type f     |
grep created_time	     |
xargs grep -H .		     |
# /created_time:を へ変換
# path YMD hmsにする
sed 's;/created_time:; ;'    |
# YMD hms pathにする
awk '{print $2,$3,$1}'       |
# 時系列順で並べかえ
sort -k1,2		     |
# ファイル作りつつパイプ
tee $tmp-list                |
# $3に頭がpostsってなているやつ
# '$列~/パターン/'って感じでかく
# 更新後のリストを$tmp-post_listに保存
awk '$3~/^posts/'            > $tmp-post_list
# datadirへ移動してpost_listへ保存
mv $tmp-post_list "$datadir/post_list"

# list pages data
awk '$3~/^pages/' $tmp-list  > $tmp-page_list
mv $tmp-page_list "$datadir/page_list"

# make post list with deleted posts
sort -m $tmp-old-post-list "$datadir/post_list" |
uniq > $tmp-new-old-list

#cat $tmp-git-change > /tmp/changed    # デバッグ用

# make list of posts whose nav must be changed
cat $tmp-git-change                             |
xargs -I@ -n 1 grep -C1 "@$" $tmp-new-old-list  |
sort -u                                         |
#sort -u > /tmp/related
#cat $tmp-new-old-list | sort -u                 |
while read ymd hms d ; do
        [ -f "$contentsdir/$d/main.md" ] || continue
        grep -C1 "$d$" "$datadir/post_list"                             |
        awk '{print $3}'                                                |
        sed -n -e '1p' -e '$p'                                          |
        xargs -I@ cat "$datadir/@/link"                                 |
        awk 'NR<=2{print}END{for(i=NR;i<2;i++){print "LOST TITLE"}}'    |
        sed -e '1s/^/prev:/' -e '2s/^/next:/'                           |
        tr '\n' ' '                                     > "$datadir/$d/nav"
done

## make keyword list 
cd "$contentsdir"
# posts pagesのymd hms pathデータ 
cat $tmp-list                    |
# 記事からmeta-yamlのKeywordsの行を取得
awk '{print $3 "/main.md"}'      |
xargs grep -H -m 1 '^Keywords:'  |
# 文字列の除去
# main.md:Keywords:の代わりに半角スペース
sed 's;/main.md:Keywords:; ;'    |
#, の後の余計なスペースなど
sed 's/ *, */,/g'                |
sed 's/  */ /g'                  |
# cgiの処理上キーワードの前後に,を入れる
# 前段の半角スペースはこのため
awk '{gsub(/^/,",",$2);print}'   |
sed 's/$/,/'                     > $tmp-keyword_list
mv $tmp-keyword_list "$datadir/keyword_list"

### MAKE SEARCH FILE ###
cd "$contentsdir"
cat $tmp-list                    |
awk '{print $3 "/main.md"}'      |
# 先頭を検索して一行ずつにする
xargs grep -H ^                  |
sed 's;/main.md:; ;'             |
# メタ情報の除去
awk 'a!=$1{c=0;a=$1}c>=2{print}$2~/^---$/{c++}' |
# #と*を検索にかけないように
awk '$2~/^\*$|^#*$/{$2=""}{print}'              |
# 空行除去
awk 'NF>1'                      > $tmp-all
mv $tmp-all "$datadir/all_markdown"

### MAKE LATEST POST ###
page=$( tail -n 1 "$datadir/post_list" | cut -d' ' -f 3 | sed 's;s/;=;')
proto=$(awk '$1=="protocol:"{print $2}' "$contentsdir/config.yaml" | tr -d \')
host=$(awk '$1=="host:"{print $2}' "$contentsdir/config.yaml" | tr -d \')

echo $proto"//"$host"/?"$page > "$datadir/last_post"

rm -f $tmp-*
